{"ast":null,"code":"import { authConstants } from \"./constants\";\nimport axios from \"../helpers/axios\";\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(`/admin/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear(); // destroys logged in token\n\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/nidhigupta/Desktop/Web-Project/NMN Apparel Store/Frontend/admin-app/src/actions/auth.actions.js"],"names":["authConstants","axios","login","user","console","log","dispatch","type","LOGIN_REQUEST","res","post","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE"],"mappings":"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","sourcesContent":["import { authConstants } from \"./constants\";\nimport axios from \"../helpers/axios\";\n\nexport const login = (user) => {\n\n    console.log(user)\n\n    return async (dispatch) => {\n\n        dispatch({ type: authConstants.LOGIN_REQUEST });\n        const res = await axios.post(`/admin/signin`, {\n            ...user\n        });\n\n        if (res.status === 200) {\n            const { token, user } = res.data;\n            localStorage.setItem('token', token);\n            localStorage.setItem('user', JSON.stringify(user));\n            dispatch({\n                type: authConstants.LOGIN_SUCCESS,\n                payload: {\n                    token, user\n                }\n            });\n        } else {\n            if (res.status === 400) {\n                dispatch({\n                    type: authConstants.LOGIN_FAILURE,\n                    payload: { error: res.data.error }\n                });\n            }\n        }\n    }\n}\n\nexport const isUserLoggedIn = () => {\n    return async dispatch => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            const user = JSON.parse(localStorage.getItem('user'));\n            dispatch({\n                type: authConstants.LOGIN_SUCCESS,\n                payload: {\n                    token, user\n                }\n            });\n        } else {\n            dispatch({\n                type: authConstants.LOGIN_FAILURE,\n                payload: { error: 'Failed to login' }\n            });\n        }\n    }\n}\n\nexport const signout = () => {\n    return async dispatch => {\n\n        dispatch({ type: authConstants.LOGOUT_REQUEST });\n        const res = await axios.post(`/admin/signout`);\n\n        if (res.status === 200) {\n            localStorage.clear(); // destroys logged in token\n            dispatch({ type: authConstants.LOGOUT_SUCCESS });\n        } else {\n            dispatch({\n                type: authConstants.LOGOUT_FAILURE,\n                payload: { error: res.data.error }\n            });\n        }\n\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}